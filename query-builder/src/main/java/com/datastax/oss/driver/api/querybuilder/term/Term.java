/*
 * Copyright DataStax, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datastax.oss.driver.api.querybuilder.term;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.api.core.cql.Statement;
import com.datastax.oss.driver.api.querybuilder.BuildableQuery;
import com.datastax.oss.driver.api.querybuilder.CqlSnippet;
import com.datastax.oss.driver.api.querybuilder.QueryBuilder;
import com.datastax.oss.driver.api.querybuilder.relation.ArithmeticRelationBuilder;
import com.datastax.oss.driver.api.querybuilder.select.Selector;

/**
 * A simple expression that doesn't reference columns.
 *
 * <p>For example, it can be used:
 *
 * <ul>
 *   <li>for the indices in a {@link Selector#range(CqlIdentifier, Term, Term) range selection};
 *   <li>as the right operand of a {@link ArithmeticRelationBuilder#isEqualTo(Term) relation}.
 * </ul>
 *
 * To build instances of this type, use the factory methods in {@link QueryBuilder}, such as {@link
 * QueryBuilder#literal(Object) literal}, {@link QueryBuilder#tuple(Iterable) tuple}, etc.
 */
public interface Term extends CqlSnippet {

  /**
   * Whether the term is idempotent.
   *
   * <p>That is, whether it always produces the same result when used multiple times. For example,
   * the literal {@code 1} is idempotent, the function call {@code now()} isn't.
   *
   * <p>This is used internally by the query builder to compute the {@link Statement#isIdempotent()}
   * flag on the statements generated by {@link BuildableQuery#build()}. If a term is ambiguous (for
   * example a raw snippet or a call to a user function), the builder is pessimistic and assumes the
   * term is not idempotent.
   */
  boolean isIdempotent();
}
