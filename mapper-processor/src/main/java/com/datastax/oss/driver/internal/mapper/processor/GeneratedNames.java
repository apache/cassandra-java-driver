/*
 * Copyright DataStax, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datastax.oss.driver.internal.mapper.processor;

import com.datastax.oss.driver.api.mapper.annotations.Dao;
import com.datastax.oss.driver.api.mapper.annotations.Entity;
import com.datastax.oss.driver.api.mapper.annotations.Mapper;
import com.squareup.javapoet.ClassName;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;

/** Centralizes the naming conventions for types or members generated by the processor. */
public class GeneratedNames {

  /** The entity helpers' private constants holding generic type definitions. */
  public static final String GENERIC_TYPE_CONSTANT = "GENERIC_TYPE";

  /** The helper class generated for an {@link Entity}-annotated class. */
  public static ClassName entityHelper(TypeElement entityClass) {
    return ClassName.get(entityClass).peerClass(entityClass.getSimpleName() + "_Helper");
  }

  /** The builder for a {@link Mapper}-annotated interface. */
  public static ClassName mapperBuilder(TypeElement mapperInterface) {
    String custom = mapperInterface.getAnnotation(Mapper.class).builderName();
    if (custom.isEmpty()) {
      return ClassName.get(mapperInterface).peerClass(mapperInterface.getSimpleName() + "Builder");
    } else {
      int i = custom.lastIndexOf('.');
      return ClassName.get(custom.substring(0, i), custom.substring(i + 1));
    }
  }

  /** The implementation of a {@link Mapper}-annotated interface. */
  public static ClassName mapperImplementation(TypeElement mapperInterface) {
    return ClassName.get(mapperInterface).peerClass(mapperInterface.getSimpleName() + "_Impl");
  }

  /**
   * The private field to store a DAO instance or map of instances in the implementation of a {@link
   * Mapper}-annotated interface.
   */
  public static String mapperDaoCacheField(ExecutableElement method) {
    return method.getSimpleName() + "Cache";
  }

  /** The implementation of a {@link Dao}-annotated interface. */
  public static ClassName daoImplementation(TypeElement daoInterface) {
    return ClassName.get(daoInterface).peerClass(daoInterface.getSimpleName() + "_Impl");
  }
}
